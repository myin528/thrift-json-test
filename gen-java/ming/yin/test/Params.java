/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ming.yin.test;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Params implements org.apache.thrift.TBase<Params, Params._Fields>, java.io.Serializable, Cloneable, Comparable<Params> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Params");

  private static final org.apache.thrift.protocol.TField FR_FIELD_DESC = new org.apache.thrift.protocol.TField("fr", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField TO_FIELD_DESC = new org.apache.thrift.protocol.TField("to", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField DISTANCES_FIELD_DESC = new org.apache.thrift.protocol.TField("distances", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField IMJPACKET_FIELD_DESC = new org.apache.thrift.protocol.TField("imjpacket", org.apache.thrift.protocol.TType.STRUCT, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ParamsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ParamsTupleSchemeFactory());
  }

  public long fr; // optional
  public long to; // optional
  public Map<Integer,Double> distances; // optional
  public ImjPacket imjpacket; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FR((short)1, "fr"),
    TO((short)2, "to"),
    DISTANCES((short)3, "distances"),
    IMJPACKET((short)4, "imjpacket");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FR
          return FR;
        case 2: // TO
          return TO;
        case 3: // DISTANCES
          return DISTANCES;
        case 4: // IMJPACKET
          return IMJPACKET;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FR_ISSET_ID = 0;
  private static final int __TO_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.FR,_Fields.TO,_Fields.DISTANCES,_Fields.IMJPACKET};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FR, new org.apache.thrift.meta_data.FieldMetaData("fr", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TO, new org.apache.thrift.meta_data.FieldMetaData("to", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DISTANCES, new org.apache.thrift.meta_data.FieldMetaData("distances", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.IMJPACKET, new org.apache.thrift.meta_data.FieldMetaData("imjpacket", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ImjPacket.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Params.class, metaDataMap);
  }

  public Params() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Params(Params other) {
    __isset_bitfield = other.__isset_bitfield;
    this.fr = other.fr;
    this.to = other.to;
    if (other.isSetDistances()) {
      Map<Integer,Double> __this__distances = new HashMap<Integer,Double>(other.distances);
      this.distances = __this__distances;
    }
    if (other.isSetImjpacket()) {
      this.imjpacket = new ImjPacket(other.imjpacket);
    }
  }

  public Params deepCopy() {
    return new Params(this);
  }

  @Override
  public void clear() {
    setFrIsSet(false);
    this.fr = 0;
    setToIsSet(false);
    this.to = 0;
    this.distances = null;
    this.imjpacket = null;
  }

  public long getFr() {
    return this.fr;
  }

  public Params setFr(long fr) {
    this.fr = fr;
    setFrIsSet(true);
    return this;
  }

  public void unsetFr() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FR_ISSET_ID);
  }

  /** Returns true if field fr is set (has been assigned a value) and false otherwise */
  public boolean isSetFr() {
    return EncodingUtils.testBit(__isset_bitfield, __FR_ISSET_ID);
  }

  public void setFrIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FR_ISSET_ID, value);
  }

  public long getTo() {
    return this.to;
  }

  public Params setTo(long to) {
    this.to = to;
    setToIsSet(true);
    return this;
  }

  public void unsetTo() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TO_ISSET_ID);
  }

  /** Returns true if field to is set (has been assigned a value) and false otherwise */
  public boolean isSetTo() {
    return EncodingUtils.testBit(__isset_bitfield, __TO_ISSET_ID);
  }

  public void setToIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TO_ISSET_ID, value);
  }

  public int getDistancesSize() {
    return (this.distances == null) ? 0 : this.distances.size();
  }

  public void putToDistances(int key, double val) {
    if (this.distances == null) {
      this.distances = new HashMap<Integer,Double>();
    }
    this.distances.put(key, val);
  }

  public Map<Integer,Double> getDistances() {
    return this.distances;
  }

  public Params setDistances(Map<Integer,Double> distances) {
    this.distances = distances;
    return this;
  }

  public void unsetDistances() {
    this.distances = null;
  }

  /** Returns true if field distances is set (has been assigned a value) and false otherwise */
  public boolean isSetDistances() {
    return this.distances != null;
  }

  public void setDistancesIsSet(boolean value) {
    if (!value) {
      this.distances = null;
    }
  }

  public ImjPacket getImjpacket() {
    return this.imjpacket;
  }

  public Params setImjpacket(ImjPacket imjpacket) {
    this.imjpacket = imjpacket;
    return this;
  }

  public void unsetImjpacket() {
    this.imjpacket = null;
  }

  /** Returns true if field imjpacket is set (has been assigned a value) and false otherwise */
  public boolean isSetImjpacket() {
    return this.imjpacket != null;
  }

  public void setImjpacketIsSet(boolean value) {
    if (!value) {
      this.imjpacket = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FR:
      if (value == null) {
        unsetFr();
      } else {
        setFr((Long)value);
      }
      break;

    case TO:
      if (value == null) {
        unsetTo();
      } else {
        setTo((Long)value);
      }
      break;

    case DISTANCES:
      if (value == null) {
        unsetDistances();
      } else {
        setDistances((Map<Integer,Double>)value);
      }
      break;

    case IMJPACKET:
      if (value == null) {
        unsetImjpacket();
      } else {
        setImjpacket((ImjPacket)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FR:
      return Long.valueOf(getFr());

    case TO:
      return Long.valueOf(getTo());

    case DISTANCES:
      return getDistances();

    case IMJPACKET:
      return getImjpacket();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FR:
      return isSetFr();
    case TO:
      return isSetTo();
    case DISTANCES:
      return isSetDistances();
    case IMJPACKET:
      return isSetImjpacket();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Params)
      return this.equals((Params)that);
    return false;
  }

  public boolean equals(Params that) {
    if (that == null)
      return false;

    boolean this_present_fr = true && this.isSetFr();
    boolean that_present_fr = true && that.isSetFr();
    if (this_present_fr || that_present_fr) {
      if (!(this_present_fr && that_present_fr))
        return false;
      if (this.fr != that.fr)
        return false;
    }

    boolean this_present_to = true && this.isSetTo();
    boolean that_present_to = true && that.isSetTo();
    if (this_present_to || that_present_to) {
      if (!(this_present_to && that_present_to))
        return false;
      if (this.to != that.to)
        return false;
    }

    boolean this_present_distances = true && this.isSetDistances();
    boolean that_present_distances = true && that.isSetDistances();
    if (this_present_distances || that_present_distances) {
      if (!(this_present_distances && that_present_distances))
        return false;
      if (!this.distances.equals(that.distances))
        return false;
    }

    boolean this_present_imjpacket = true && this.isSetImjpacket();
    boolean that_present_imjpacket = true && that.isSetImjpacket();
    if (this_present_imjpacket || that_present_imjpacket) {
      if (!(this_present_imjpacket && that_present_imjpacket))
        return false;
      if (!this.imjpacket.equals(that.imjpacket))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Params other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFr()).compareTo(other.isSetFr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fr, other.fr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTo()).compareTo(other.isSetTo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.to, other.to);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDistances()).compareTo(other.isSetDistances());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDistances()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.distances, other.distances);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImjpacket()).compareTo(other.isSetImjpacket());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImjpacket()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imjpacket, other.imjpacket);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Params(");
    boolean first = true;

    if (isSetFr()) {
      sb.append("fr:");
      sb.append(this.fr);
      first = false;
    }
    if (isSetTo()) {
      if (!first) sb.append(", ");
      sb.append("to:");
      sb.append(this.to);
      first = false;
    }
    if (isSetDistances()) {
      if (!first) sb.append(", ");
      sb.append("distances:");
      if (this.distances == null) {
        sb.append("null");
      } else {
        sb.append(this.distances);
      }
      first = false;
    }
    if (isSetImjpacket()) {
      if (!first) sb.append(", ");
      sb.append("imjpacket:");
      if (this.imjpacket == null) {
        sb.append("null");
      } else {
        sb.append(this.imjpacket);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (imjpacket != null) {
      imjpacket.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ParamsStandardSchemeFactory implements SchemeFactory {
    public ParamsStandardScheme getScheme() {
      return new ParamsStandardScheme();
    }
  }

  private static class ParamsStandardScheme extends StandardScheme<Params> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Params struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FR
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.fr = iprot.readI64();
              struct.setFrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TO
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.to = iprot.readI64();
              struct.setToIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DISTANCES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.distances = new HashMap<Integer,Double>(2*_map0.size);
                for (int _i1 = 0; _i1 < _map0.size; ++_i1)
                {
                  int _key2;
                  double _val3;
                  _key2 = iprot.readI32();
                  _val3 = iprot.readDouble();
                  struct.distances.put(_key2, _val3);
                }
                iprot.readMapEnd();
              }
              struct.setDistancesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IMJPACKET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.imjpacket = new ImjPacket();
              struct.imjpacket.read(iprot);
              struct.setImjpacketIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Params struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetFr()) {
        oprot.writeFieldBegin(FR_FIELD_DESC);
        oprot.writeI64(struct.fr);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTo()) {
        oprot.writeFieldBegin(TO_FIELD_DESC);
        oprot.writeI64(struct.to);
        oprot.writeFieldEnd();
      }
      if (struct.distances != null) {
        if (struct.isSetDistances()) {
          oprot.writeFieldBegin(DISTANCES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, struct.distances.size()));
            for (Map.Entry<Integer, Double> _iter4 : struct.distances.entrySet())
            {
              oprot.writeI32(_iter4.getKey());
              oprot.writeDouble(_iter4.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.imjpacket != null) {
        if (struct.isSetImjpacket()) {
          oprot.writeFieldBegin(IMJPACKET_FIELD_DESC);
          struct.imjpacket.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ParamsTupleSchemeFactory implements SchemeFactory {
    public ParamsTupleScheme getScheme() {
      return new ParamsTupleScheme();
    }
  }

  private static class ParamsTupleScheme extends TupleScheme<Params> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Params struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetFr()) {
        optionals.set(0);
      }
      if (struct.isSetTo()) {
        optionals.set(1);
      }
      if (struct.isSetDistances()) {
        optionals.set(2);
      }
      if (struct.isSetImjpacket()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetFr()) {
        oprot.writeI64(struct.fr);
      }
      if (struct.isSetTo()) {
        oprot.writeI64(struct.to);
      }
      if (struct.isSetDistances()) {
        {
          oprot.writeI32(struct.distances.size());
          for (Map.Entry<Integer, Double> _iter5 : struct.distances.entrySet())
          {
            oprot.writeI32(_iter5.getKey());
            oprot.writeDouble(_iter5.getValue());
          }
        }
      }
      if (struct.isSetImjpacket()) {
        struct.imjpacket.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Params struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.fr = iprot.readI64();
        struct.setFrIsSet(true);
      }
      if (incoming.get(1)) {
        struct.to = iprot.readI64();
        struct.setToIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.distances = new HashMap<Integer,Double>(2*_map6.size);
          for (int _i7 = 0; _i7 < _map6.size; ++_i7)
          {
            int _key8;
            double _val9;
            _key8 = iprot.readI32();
            _val9 = iprot.readDouble();
            struct.distances.put(_key8, _val9);
          }
        }
        struct.setDistancesIsSet(true);
      }
      if (incoming.get(3)) {
        struct.imjpacket = new ImjPacket();
        struct.imjpacket.read(iprot);
        struct.setImjpacketIsSet(true);
      }
    }
  }

}

