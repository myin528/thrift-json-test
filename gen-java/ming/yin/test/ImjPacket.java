/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ming.yin.test;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ImjPacket implements org.apache.thrift.TBase<ImjPacket, ImjPacket._Fields>, java.io.Serializable, Cloneable, Comparable<ImjPacket> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ImjPacket");

  private static final org.apache.thrift.protocol.TField SHORT_STRING_1_FIELD_DESC = new org.apache.thrift.protocol.TField("short_string_1", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SHORT_STRING_2_FIELD_DESC = new org.apache.thrift.protocol.TField("short_string_2", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("text", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField LOC_FIELD_DESC = new org.apache.thrift.protocol.TField("loc", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField NUM_1_FIELD_DESC = new org.apache.thrift.protocol.TField("num_1", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField NUM_2_FIELD_DESC = new org.apache.thrift.protocol.TField("num_2", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField NUM_3_FIELD_DESC = new org.apache.thrift.protocol.TField("num_3", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField NUM_4_FIELD_DESC = new org.apache.thrift.protocol.TField("num_4", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField NUM_5_FIELD_DESC = new org.apache.thrift.protocol.TField("num_5", org.apache.thrift.protocol.TType.I16, (short)10);
  private static final org.apache.thrift.protocol.TField NUM_6_FIELD_DESC = new org.apache.thrift.protocol.TField("num_6", org.apache.thrift.protocol.TType.I16, (short)11);
  private static final org.apache.thrift.protocol.TField NUM_7_FIELD_DESC = new org.apache.thrift.protocol.TField("num_7", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField ITS_A_NUM_8_FIELD_DESC = new org.apache.thrift.protocol.TField("its_a_num_8", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField ITS_A_NUM_9_FIELD_DESC = new org.apache.thrift.protocol.TField("its_a_num_9", org.apache.thrift.protocol.TType.BYTE, (short)14);
  private static final org.apache.thrift.protocol.TField ITS_A_NUM_10_FIELD_DESC = new org.apache.thrift.protocol.TField("its_a_num_10", org.apache.thrift.protocol.TType.BYTE, (short)15);
  private static final org.apache.thrift.protocol.TField B1_FIELD_DESC = new org.apache.thrift.protocol.TField("b1", org.apache.thrift.protocol.TType.BOOL, (short)16);
  private static final org.apache.thrift.protocol.TField BOOLEAN_2_FIELD_DESC = new org.apache.thrift.protocol.TField("boolean_2", org.apache.thrift.protocol.TType.BOOL, (short)17);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ImjPacketStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ImjPacketTupleSchemeFactory());
  }

  public String short_string_1; // optional
  public String short_string_2; // optional
  public String text; // optional
  public Location loc; // optional
  /**
   * 
   * @see Type
   */
  public Type type; // optional
  public int num_1; // optional
  public int num_2; // optional
  public long num_3; // optional
  public long num_4; // optional
  public short num_5; // optional
  public short num_6; // optional
  public double num_7; // optional
  public double its_a_num_8; // optional
  public byte its_a_num_9; // optional
  public byte its_a_num_10; // optional
  public boolean b1; // optional
  public boolean boolean_2; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SHORT_STRING_1((short)1, "short_string_1"),
    SHORT_STRING_2((short)2, "short_string_2"),
    TEXT((short)3, "text"),
    LOC((short)4, "loc"),
    /**
     * 
     * @see Type
     */
    TYPE((short)5, "type"),
    NUM_1((short)6, "num_1"),
    NUM_2((short)7, "num_2"),
    NUM_3((short)8, "num_3"),
    NUM_4((short)9, "num_4"),
    NUM_5((short)10, "num_5"),
    NUM_6((short)11, "num_6"),
    NUM_7((short)12, "num_7"),
    ITS_A_NUM_8((short)13, "its_a_num_8"),
    ITS_A_NUM_9((short)14, "its_a_num_9"),
    ITS_A_NUM_10((short)15, "its_a_num_10"),
    B1((short)16, "b1"),
    BOOLEAN_2((short)17, "boolean_2");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SHORT_STRING_1
          return SHORT_STRING_1;
        case 2: // SHORT_STRING_2
          return SHORT_STRING_2;
        case 3: // TEXT
          return TEXT;
        case 4: // LOC
          return LOC;
        case 5: // TYPE
          return TYPE;
        case 6: // NUM_1
          return NUM_1;
        case 7: // NUM_2
          return NUM_2;
        case 8: // NUM_3
          return NUM_3;
        case 9: // NUM_4
          return NUM_4;
        case 10: // NUM_5
          return NUM_5;
        case 11: // NUM_6
          return NUM_6;
        case 12: // NUM_7
          return NUM_7;
        case 13: // ITS_A_NUM_8
          return ITS_A_NUM_8;
        case 14: // ITS_A_NUM_9
          return ITS_A_NUM_9;
        case 15: // ITS_A_NUM_10
          return ITS_A_NUM_10;
        case 16: // B1
          return B1;
        case 17: // BOOLEAN_2
          return BOOLEAN_2;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUM_1_ISSET_ID = 0;
  private static final int __NUM_2_ISSET_ID = 1;
  private static final int __NUM_3_ISSET_ID = 2;
  private static final int __NUM_4_ISSET_ID = 3;
  private static final int __NUM_5_ISSET_ID = 4;
  private static final int __NUM_6_ISSET_ID = 5;
  private static final int __NUM_7_ISSET_ID = 6;
  private static final int __ITS_A_NUM_8_ISSET_ID = 7;
  private static final int __ITS_A_NUM_9_ISSET_ID = 8;
  private static final int __ITS_A_NUM_10_ISSET_ID = 9;
  private static final int __B1_ISSET_ID = 10;
  private static final int __BOOLEAN_2_ISSET_ID = 11;
  private short __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.SHORT_STRING_1,_Fields.SHORT_STRING_2,_Fields.TEXT,_Fields.LOC,_Fields.TYPE,_Fields.NUM_1,_Fields.NUM_2,_Fields.NUM_3,_Fields.NUM_4,_Fields.NUM_5,_Fields.NUM_6,_Fields.NUM_7,_Fields.ITS_A_NUM_8,_Fields.ITS_A_NUM_9,_Fields.ITS_A_NUM_10,_Fields.B1,_Fields.BOOLEAN_2};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SHORT_STRING_1, new org.apache.thrift.meta_data.FieldMetaData("short_string_1", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHORT_STRING_2, new org.apache.thrift.meta_data.FieldMetaData("short_string_2", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEXT, new org.apache.thrift.meta_data.FieldMetaData("text", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOC, new org.apache.thrift.meta_data.FieldMetaData("loc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Location.class)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Type.class)));
    tmpMap.put(_Fields.NUM_1, new org.apache.thrift.meta_data.FieldMetaData("num_1", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_2, new org.apache.thrift.meta_data.FieldMetaData("num_2", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_3, new org.apache.thrift.meta_data.FieldMetaData("num_3", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NUM_4, new org.apache.thrift.meta_data.FieldMetaData("num_4", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NUM_5, new org.apache.thrift.meta_data.FieldMetaData("num_5", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.NUM_6, new org.apache.thrift.meta_data.FieldMetaData("num_6", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.NUM_7, new org.apache.thrift.meta_data.FieldMetaData("num_7", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ITS_A_NUM_8, new org.apache.thrift.meta_data.FieldMetaData("its_a_num_8", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ITS_A_NUM_9, new org.apache.thrift.meta_data.FieldMetaData("its_a_num_9", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.ITS_A_NUM_10, new org.apache.thrift.meta_data.FieldMetaData("its_a_num_10", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.B1, new org.apache.thrift.meta_data.FieldMetaData("b1", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BOOLEAN_2, new org.apache.thrift.meta_data.FieldMetaData("boolean_2", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ImjPacket.class, metaDataMap);
  }

  public ImjPacket() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ImjPacket(ImjPacket other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetShort_string_1()) {
      this.short_string_1 = other.short_string_1;
    }
    if (other.isSetShort_string_2()) {
      this.short_string_2 = other.short_string_2;
    }
    if (other.isSetText()) {
      this.text = other.text;
    }
    if (other.isSetLoc()) {
      this.loc = new Location(other.loc);
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.num_1 = other.num_1;
    this.num_2 = other.num_2;
    this.num_3 = other.num_3;
    this.num_4 = other.num_4;
    this.num_5 = other.num_5;
    this.num_6 = other.num_6;
    this.num_7 = other.num_7;
    this.its_a_num_8 = other.its_a_num_8;
    this.its_a_num_9 = other.its_a_num_9;
    this.its_a_num_10 = other.its_a_num_10;
    this.b1 = other.b1;
    this.boolean_2 = other.boolean_2;
  }

  public ImjPacket deepCopy() {
    return new ImjPacket(this);
  }

  @Override
  public void clear() {
    this.short_string_1 = null;
    this.short_string_2 = null;
    this.text = null;
    this.loc = null;
    this.type = null;
    setNum_1IsSet(false);
    this.num_1 = 0;
    setNum_2IsSet(false);
    this.num_2 = 0;
    setNum_3IsSet(false);
    this.num_3 = 0;
    setNum_4IsSet(false);
    this.num_4 = 0;
    setNum_5IsSet(false);
    this.num_5 = 0;
    setNum_6IsSet(false);
    this.num_6 = 0;
    setNum_7IsSet(false);
    this.num_7 = 0.0;
    setIts_a_num_8IsSet(false);
    this.its_a_num_8 = 0.0;
    setIts_a_num_9IsSet(false);
    this.its_a_num_9 = 0;
    setIts_a_num_10IsSet(false);
    this.its_a_num_10 = 0;
    setB1IsSet(false);
    this.b1 = false;
    setBoolean_2IsSet(false);
    this.boolean_2 = false;
  }

  public String getShort_string_1() {
    return this.short_string_1;
  }

  public ImjPacket setShort_string_1(String short_string_1) {
    this.short_string_1 = short_string_1;
    return this;
  }

  public void unsetShort_string_1() {
    this.short_string_1 = null;
  }

  /** Returns true if field short_string_1 is set (has been assigned a value) and false otherwise */
  public boolean isSetShort_string_1() {
    return this.short_string_1 != null;
  }

  public void setShort_string_1IsSet(boolean value) {
    if (!value) {
      this.short_string_1 = null;
    }
  }

  public String getShort_string_2() {
    return this.short_string_2;
  }

  public ImjPacket setShort_string_2(String short_string_2) {
    this.short_string_2 = short_string_2;
    return this;
  }

  public void unsetShort_string_2() {
    this.short_string_2 = null;
  }

  /** Returns true if field short_string_2 is set (has been assigned a value) and false otherwise */
  public boolean isSetShort_string_2() {
    return this.short_string_2 != null;
  }

  public void setShort_string_2IsSet(boolean value) {
    if (!value) {
      this.short_string_2 = null;
    }
  }

  public String getText() {
    return this.text;
  }

  public ImjPacket setText(String text) {
    this.text = text;
    return this;
  }

  public void unsetText() {
    this.text = null;
  }

  /** Returns true if field text is set (has been assigned a value) and false otherwise */
  public boolean isSetText() {
    return this.text != null;
  }

  public void setTextIsSet(boolean value) {
    if (!value) {
      this.text = null;
    }
  }

  public Location getLoc() {
    return this.loc;
  }

  public ImjPacket setLoc(Location loc) {
    this.loc = loc;
    return this;
  }

  public void unsetLoc() {
    this.loc = null;
  }

  /** Returns true if field loc is set (has been assigned a value) and false otherwise */
  public boolean isSetLoc() {
    return this.loc != null;
  }

  public void setLocIsSet(boolean value) {
    if (!value) {
      this.loc = null;
    }
  }

  /**
   * 
   * @see Type
   */
  public Type getType() {
    return this.type;
  }

  /**
   * 
   * @see Type
   */
  public ImjPacket setType(Type type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public int getNum_1() {
    return this.num_1;
  }

  public ImjPacket setNum_1(int num_1) {
    this.num_1 = num_1;
    setNum_1IsSet(true);
    return this;
  }

  public void unsetNum_1() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_1_ISSET_ID);
  }

  /** Returns true if field num_1 is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_1() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_1_ISSET_ID);
  }

  public void setNum_1IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_1_ISSET_ID, value);
  }

  public int getNum_2() {
    return this.num_2;
  }

  public ImjPacket setNum_2(int num_2) {
    this.num_2 = num_2;
    setNum_2IsSet(true);
    return this;
  }

  public void unsetNum_2() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_2_ISSET_ID);
  }

  /** Returns true if field num_2 is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_2() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_2_ISSET_ID);
  }

  public void setNum_2IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_2_ISSET_ID, value);
  }

  public long getNum_3() {
    return this.num_3;
  }

  public ImjPacket setNum_3(long num_3) {
    this.num_3 = num_3;
    setNum_3IsSet(true);
    return this;
  }

  public void unsetNum_3() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_3_ISSET_ID);
  }

  /** Returns true if field num_3 is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_3() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_3_ISSET_ID);
  }

  public void setNum_3IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_3_ISSET_ID, value);
  }

  public long getNum_4() {
    return this.num_4;
  }

  public ImjPacket setNum_4(long num_4) {
    this.num_4 = num_4;
    setNum_4IsSet(true);
    return this;
  }

  public void unsetNum_4() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_4_ISSET_ID);
  }

  /** Returns true if field num_4 is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_4() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_4_ISSET_ID);
  }

  public void setNum_4IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_4_ISSET_ID, value);
  }

  public short getNum_5() {
    return this.num_5;
  }

  public ImjPacket setNum_5(short num_5) {
    this.num_5 = num_5;
    setNum_5IsSet(true);
    return this;
  }

  public void unsetNum_5() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_5_ISSET_ID);
  }

  /** Returns true if field num_5 is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_5() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_5_ISSET_ID);
  }

  public void setNum_5IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_5_ISSET_ID, value);
  }

  public short getNum_6() {
    return this.num_6;
  }

  public ImjPacket setNum_6(short num_6) {
    this.num_6 = num_6;
    setNum_6IsSet(true);
    return this;
  }

  public void unsetNum_6() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_6_ISSET_ID);
  }

  /** Returns true if field num_6 is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_6() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_6_ISSET_ID);
  }

  public void setNum_6IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_6_ISSET_ID, value);
  }

  public double getNum_7() {
    return this.num_7;
  }

  public ImjPacket setNum_7(double num_7) {
    this.num_7 = num_7;
    setNum_7IsSet(true);
    return this;
  }

  public void unsetNum_7() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_7_ISSET_ID);
  }

  /** Returns true if field num_7 is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_7() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_7_ISSET_ID);
  }

  public void setNum_7IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_7_ISSET_ID, value);
  }

  public double getIts_a_num_8() {
    return this.its_a_num_8;
  }

  public ImjPacket setIts_a_num_8(double its_a_num_8) {
    this.its_a_num_8 = its_a_num_8;
    setIts_a_num_8IsSet(true);
    return this;
  }

  public void unsetIts_a_num_8() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ITS_A_NUM_8_ISSET_ID);
  }

  /** Returns true if field its_a_num_8 is set (has been assigned a value) and false otherwise */
  public boolean isSetIts_a_num_8() {
    return EncodingUtils.testBit(__isset_bitfield, __ITS_A_NUM_8_ISSET_ID);
  }

  public void setIts_a_num_8IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ITS_A_NUM_8_ISSET_ID, value);
  }

  public byte getIts_a_num_9() {
    return this.its_a_num_9;
  }

  public ImjPacket setIts_a_num_9(byte its_a_num_9) {
    this.its_a_num_9 = its_a_num_9;
    setIts_a_num_9IsSet(true);
    return this;
  }

  public void unsetIts_a_num_9() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ITS_A_NUM_9_ISSET_ID);
  }

  /** Returns true if field its_a_num_9 is set (has been assigned a value) and false otherwise */
  public boolean isSetIts_a_num_9() {
    return EncodingUtils.testBit(__isset_bitfield, __ITS_A_NUM_9_ISSET_ID);
  }

  public void setIts_a_num_9IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ITS_A_NUM_9_ISSET_ID, value);
  }

  public byte getIts_a_num_10() {
    return this.its_a_num_10;
  }

  public ImjPacket setIts_a_num_10(byte its_a_num_10) {
    this.its_a_num_10 = its_a_num_10;
    setIts_a_num_10IsSet(true);
    return this;
  }

  public void unsetIts_a_num_10() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ITS_A_NUM_10_ISSET_ID);
  }

  /** Returns true if field its_a_num_10 is set (has been assigned a value) and false otherwise */
  public boolean isSetIts_a_num_10() {
    return EncodingUtils.testBit(__isset_bitfield, __ITS_A_NUM_10_ISSET_ID);
  }

  public void setIts_a_num_10IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ITS_A_NUM_10_ISSET_ID, value);
  }

  public boolean isB1() {
    return this.b1;
  }

  public ImjPacket setB1(boolean b1) {
    this.b1 = b1;
    setB1IsSet(true);
    return this;
  }

  public void unsetB1() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __B1_ISSET_ID);
  }

  /** Returns true if field b1 is set (has been assigned a value) and false otherwise */
  public boolean isSetB1() {
    return EncodingUtils.testBit(__isset_bitfield, __B1_ISSET_ID);
  }

  public void setB1IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __B1_ISSET_ID, value);
  }

  public boolean isBoolean_2() {
    return this.boolean_2;
  }

  public ImjPacket setBoolean_2(boolean boolean_2) {
    this.boolean_2 = boolean_2;
    setBoolean_2IsSet(true);
    return this;
  }

  public void unsetBoolean_2() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BOOLEAN_2_ISSET_ID);
  }

  /** Returns true if field boolean_2 is set (has been assigned a value) and false otherwise */
  public boolean isSetBoolean_2() {
    return EncodingUtils.testBit(__isset_bitfield, __BOOLEAN_2_ISSET_ID);
  }

  public void setBoolean_2IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BOOLEAN_2_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SHORT_STRING_1:
      if (value == null) {
        unsetShort_string_1();
      } else {
        setShort_string_1((String)value);
      }
      break;

    case SHORT_STRING_2:
      if (value == null) {
        unsetShort_string_2();
      } else {
        setShort_string_2((String)value);
      }
      break;

    case TEXT:
      if (value == null) {
        unsetText();
      } else {
        setText((String)value);
      }
      break;

    case LOC:
      if (value == null) {
        unsetLoc();
      } else {
        setLoc((Location)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Type)value);
      }
      break;

    case NUM_1:
      if (value == null) {
        unsetNum_1();
      } else {
        setNum_1((Integer)value);
      }
      break;

    case NUM_2:
      if (value == null) {
        unsetNum_2();
      } else {
        setNum_2((Integer)value);
      }
      break;

    case NUM_3:
      if (value == null) {
        unsetNum_3();
      } else {
        setNum_3((Long)value);
      }
      break;

    case NUM_4:
      if (value == null) {
        unsetNum_4();
      } else {
        setNum_4((Long)value);
      }
      break;

    case NUM_5:
      if (value == null) {
        unsetNum_5();
      } else {
        setNum_5((Short)value);
      }
      break;

    case NUM_6:
      if (value == null) {
        unsetNum_6();
      } else {
        setNum_6((Short)value);
      }
      break;

    case NUM_7:
      if (value == null) {
        unsetNum_7();
      } else {
        setNum_7((Double)value);
      }
      break;

    case ITS_A_NUM_8:
      if (value == null) {
        unsetIts_a_num_8();
      } else {
        setIts_a_num_8((Double)value);
      }
      break;

    case ITS_A_NUM_9:
      if (value == null) {
        unsetIts_a_num_9();
      } else {
        setIts_a_num_9((Byte)value);
      }
      break;

    case ITS_A_NUM_10:
      if (value == null) {
        unsetIts_a_num_10();
      } else {
        setIts_a_num_10((Byte)value);
      }
      break;

    case B1:
      if (value == null) {
        unsetB1();
      } else {
        setB1((Boolean)value);
      }
      break;

    case BOOLEAN_2:
      if (value == null) {
        unsetBoolean_2();
      } else {
        setBoolean_2((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SHORT_STRING_1:
      return getShort_string_1();

    case SHORT_STRING_2:
      return getShort_string_2();

    case TEXT:
      return getText();

    case LOC:
      return getLoc();

    case TYPE:
      return getType();

    case NUM_1:
      return Integer.valueOf(getNum_1());

    case NUM_2:
      return Integer.valueOf(getNum_2());

    case NUM_3:
      return Long.valueOf(getNum_3());

    case NUM_4:
      return Long.valueOf(getNum_4());

    case NUM_5:
      return Short.valueOf(getNum_5());

    case NUM_6:
      return Short.valueOf(getNum_6());

    case NUM_7:
      return Double.valueOf(getNum_7());

    case ITS_A_NUM_8:
      return Double.valueOf(getIts_a_num_8());

    case ITS_A_NUM_9:
      return Byte.valueOf(getIts_a_num_9());

    case ITS_A_NUM_10:
      return Byte.valueOf(getIts_a_num_10());

    case B1:
      return Boolean.valueOf(isB1());

    case BOOLEAN_2:
      return Boolean.valueOf(isBoolean_2());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SHORT_STRING_1:
      return isSetShort_string_1();
    case SHORT_STRING_2:
      return isSetShort_string_2();
    case TEXT:
      return isSetText();
    case LOC:
      return isSetLoc();
    case TYPE:
      return isSetType();
    case NUM_1:
      return isSetNum_1();
    case NUM_2:
      return isSetNum_2();
    case NUM_3:
      return isSetNum_3();
    case NUM_4:
      return isSetNum_4();
    case NUM_5:
      return isSetNum_5();
    case NUM_6:
      return isSetNum_6();
    case NUM_7:
      return isSetNum_7();
    case ITS_A_NUM_8:
      return isSetIts_a_num_8();
    case ITS_A_NUM_9:
      return isSetIts_a_num_9();
    case ITS_A_NUM_10:
      return isSetIts_a_num_10();
    case B1:
      return isSetB1();
    case BOOLEAN_2:
      return isSetBoolean_2();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ImjPacket)
      return this.equals((ImjPacket)that);
    return false;
  }

  public boolean equals(ImjPacket that) {
    if (that == null)
      return false;

    boolean this_present_short_string_1 = true && this.isSetShort_string_1();
    boolean that_present_short_string_1 = true && that.isSetShort_string_1();
    if (this_present_short_string_1 || that_present_short_string_1) {
      if (!(this_present_short_string_1 && that_present_short_string_1))
        return false;
      if (!this.short_string_1.equals(that.short_string_1))
        return false;
    }

    boolean this_present_short_string_2 = true && this.isSetShort_string_2();
    boolean that_present_short_string_2 = true && that.isSetShort_string_2();
    if (this_present_short_string_2 || that_present_short_string_2) {
      if (!(this_present_short_string_2 && that_present_short_string_2))
        return false;
      if (!this.short_string_2.equals(that.short_string_2))
        return false;
    }

    boolean this_present_text = true && this.isSetText();
    boolean that_present_text = true && that.isSetText();
    if (this_present_text || that_present_text) {
      if (!(this_present_text && that_present_text))
        return false;
      if (!this.text.equals(that.text))
        return false;
    }

    boolean this_present_loc = true && this.isSetLoc();
    boolean that_present_loc = true && that.isSetLoc();
    if (this_present_loc || that_present_loc) {
      if (!(this_present_loc && that_present_loc))
        return false;
      if (!this.loc.equals(that.loc))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_num_1 = true && this.isSetNum_1();
    boolean that_present_num_1 = true && that.isSetNum_1();
    if (this_present_num_1 || that_present_num_1) {
      if (!(this_present_num_1 && that_present_num_1))
        return false;
      if (this.num_1 != that.num_1)
        return false;
    }

    boolean this_present_num_2 = true && this.isSetNum_2();
    boolean that_present_num_2 = true && that.isSetNum_2();
    if (this_present_num_2 || that_present_num_2) {
      if (!(this_present_num_2 && that_present_num_2))
        return false;
      if (this.num_2 != that.num_2)
        return false;
    }

    boolean this_present_num_3 = true && this.isSetNum_3();
    boolean that_present_num_3 = true && that.isSetNum_3();
    if (this_present_num_3 || that_present_num_3) {
      if (!(this_present_num_3 && that_present_num_3))
        return false;
      if (this.num_3 != that.num_3)
        return false;
    }

    boolean this_present_num_4 = true && this.isSetNum_4();
    boolean that_present_num_4 = true && that.isSetNum_4();
    if (this_present_num_4 || that_present_num_4) {
      if (!(this_present_num_4 && that_present_num_4))
        return false;
      if (this.num_4 != that.num_4)
        return false;
    }

    boolean this_present_num_5 = true && this.isSetNum_5();
    boolean that_present_num_5 = true && that.isSetNum_5();
    if (this_present_num_5 || that_present_num_5) {
      if (!(this_present_num_5 && that_present_num_5))
        return false;
      if (this.num_5 != that.num_5)
        return false;
    }

    boolean this_present_num_6 = true && this.isSetNum_6();
    boolean that_present_num_6 = true && that.isSetNum_6();
    if (this_present_num_6 || that_present_num_6) {
      if (!(this_present_num_6 && that_present_num_6))
        return false;
      if (this.num_6 != that.num_6)
        return false;
    }

    boolean this_present_num_7 = true && this.isSetNum_7();
    boolean that_present_num_7 = true && that.isSetNum_7();
    if (this_present_num_7 || that_present_num_7) {
      if (!(this_present_num_7 && that_present_num_7))
        return false;
      if (this.num_7 != that.num_7)
        return false;
    }

    boolean this_present_its_a_num_8 = true && this.isSetIts_a_num_8();
    boolean that_present_its_a_num_8 = true && that.isSetIts_a_num_8();
    if (this_present_its_a_num_8 || that_present_its_a_num_8) {
      if (!(this_present_its_a_num_8 && that_present_its_a_num_8))
        return false;
      if (this.its_a_num_8 != that.its_a_num_8)
        return false;
    }

    boolean this_present_its_a_num_9 = true && this.isSetIts_a_num_9();
    boolean that_present_its_a_num_9 = true && that.isSetIts_a_num_9();
    if (this_present_its_a_num_9 || that_present_its_a_num_9) {
      if (!(this_present_its_a_num_9 && that_present_its_a_num_9))
        return false;
      if (this.its_a_num_9 != that.its_a_num_9)
        return false;
    }

    boolean this_present_its_a_num_10 = true && this.isSetIts_a_num_10();
    boolean that_present_its_a_num_10 = true && that.isSetIts_a_num_10();
    if (this_present_its_a_num_10 || that_present_its_a_num_10) {
      if (!(this_present_its_a_num_10 && that_present_its_a_num_10))
        return false;
      if (this.its_a_num_10 != that.its_a_num_10)
        return false;
    }

    boolean this_present_b1 = true && this.isSetB1();
    boolean that_present_b1 = true && that.isSetB1();
    if (this_present_b1 || that_present_b1) {
      if (!(this_present_b1 && that_present_b1))
        return false;
      if (this.b1 != that.b1)
        return false;
    }

    boolean this_present_boolean_2 = true && this.isSetBoolean_2();
    boolean that_present_boolean_2 = true && that.isSetBoolean_2();
    if (this_present_boolean_2 || that_present_boolean_2) {
      if (!(this_present_boolean_2 && that_present_boolean_2))
        return false;
      if (this.boolean_2 != that.boolean_2)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ImjPacket other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetShort_string_1()).compareTo(other.isSetShort_string_1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShort_string_1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.short_string_1, other.short_string_1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShort_string_2()).compareTo(other.isSetShort_string_2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShort_string_2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.short_string_2, other.short_string_2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetText()).compareTo(other.isSetText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.text, other.text);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoc()).compareTo(other.isSetLoc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loc, other.loc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum_1()).compareTo(other.isSetNum_1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_1, other.num_1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum_2()).compareTo(other.isSetNum_2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_2, other.num_2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum_3()).compareTo(other.isSetNum_3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_3, other.num_3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum_4()).compareTo(other.isSetNum_4());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_4()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_4, other.num_4);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum_5()).compareTo(other.isSetNum_5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_5()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_5, other.num_5);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum_6()).compareTo(other.isSetNum_6());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_6()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_6, other.num_6);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum_7()).compareTo(other.isSetNum_7());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_7()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_7, other.num_7);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIts_a_num_8()).compareTo(other.isSetIts_a_num_8());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIts_a_num_8()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.its_a_num_8, other.its_a_num_8);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIts_a_num_9()).compareTo(other.isSetIts_a_num_9());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIts_a_num_9()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.its_a_num_9, other.its_a_num_9);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIts_a_num_10()).compareTo(other.isSetIts_a_num_10());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIts_a_num_10()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.its_a_num_10, other.its_a_num_10);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetB1()).compareTo(other.isSetB1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetB1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.b1, other.b1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBoolean_2()).compareTo(other.isSetBoolean_2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBoolean_2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.boolean_2, other.boolean_2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ImjPacket(");
    boolean first = true;

    if (isSetShort_string_1()) {
      sb.append("short_string_1:");
      if (this.short_string_1 == null) {
        sb.append("null");
      } else {
        sb.append(this.short_string_1);
      }
      first = false;
    }
    if (isSetShort_string_2()) {
      if (!first) sb.append(", ");
      sb.append("short_string_2:");
      if (this.short_string_2 == null) {
        sb.append("null");
      } else {
        sb.append(this.short_string_2);
      }
      first = false;
    }
    if (isSetText()) {
      if (!first) sb.append(", ");
      sb.append("text:");
      if (this.text == null) {
        sb.append("null");
      } else {
        sb.append(this.text);
      }
      first = false;
    }
    if (isSetLoc()) {
      if (!first) sb.append(", ");
      sb.append("loc:");
      if (this.loc == null) {
        sb.append("null");
      } else {
        sb.append(this.loc);
      }
      first = false;
    }
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    if (isSetNum_1()) {
      if (!first) sb.append(", ");
      sb.append("num_1:");
      sb.append(this.num_1);
      first = false;
    }
    if (isSetNum_2()) {
      if (!first) sb.append(", ");
      sb.append("num_2:");
      sb.append(this.num_2);
      first = false;
    }
    if (isSetNum_3()) {
      if (!first) sb.append(", ");
      sb.append("num_3:");
      sb.append(this.num_3);
      first = false;
    }
    if (isSetNum_4()) {
      if (!first) sb.append(", ");
      sb.append("num_4:");
      sb.append(this.num_4);
      first = false;
    }
    if (isSetNum_5()) {
      if (!first) sb.append(", ");
      sb.append("num_5:");
      sb.append(this.num_5);
      first = false;
    }
    if (isSetNum_6()) {
      if (!first) sb.append(", ");
      sb.append("num_6:");
      sb.append(this.num_6);
      first = false;
    }
    if (isSetNum_7()) {
      if (!first) sb.append(", ");
      sb.append("num_7:");
      sb.append(this.num_7);
      first = false;
    }
    if (isSetIts_a_num_8()) {
      if (!first) sb.append(", ");
      sb.append("its_a_num_8:");
      sb.append(this.its_a_num_8);
      first = false;
    }
    if (isSetIts_a_num_9()) {
      if (!first) sb.append(", ");
      sb.append("its_a_num_9:");
      sb.append(this.its_a_num_9);
      first = false;
    }
    if (isSetIts_a_num_10()) {
      if (!first) sb.append(", ");
      sb.append("its_a_num_10:");
      sb.append(this.its_a_num_10);
      first = false;
    }
    if (isSetB1()) {
      if (!first) sb.append(", ");
      sb.append("b1:");
      sb.append(this.b1);
      first = false;
    }
    if (isSetBoolean_2()) {
      if (!first) sb.append(", ");
      sb.append("boolean_2:");
      sb.append(this.boolean_2);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (loc != null) {
      loc.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ImjPacketStandardSchemeFactory implements SchemeFactory {
    public ImjPacketStandardScheme getScheme() {
      return new ImjPacketStandardScheme();
    }
  }

  private static class ImjPacketStandardScheme extends StandardScheme<ImjPacket> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ImjPacket struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SHORT_STRING_1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.short_string_1 = iprot.readString();
              struct.setShort_string_1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SHORT_STRING_2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.short_string_2 = iprot.readString();
              struct.setShort_string_2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.text = iprot.readString();
              struct.setTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LOC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.loc = new Location();
              struct.loc.read(iprot);
              struct.setLocIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = Type.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NUM_1
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num_1 = iprot.readI32();
              struct.setNum_1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // NUM_2
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num_2 = iprot.readI32();
              struct.setNum_2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // NUM_3
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.num_3 = iprot.readI64();
              struct.setNum_3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // NUM_4
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.num_4 = iprot.readI64();
              struct.setNum_4IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // NUM_5
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.num_5 = iprot.readI16();
              struct.setNum_5IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // NUM_6
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.num_6 = iprot.readI16();
              struct.setNum_6IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // NUM_7
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.num_7 = iprot.readDouble();
              struct.setNum_7IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ITS_A_NUM_8
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.its_a_num_8 = iprot.readDouble();
              struct.setIts_a_num_8IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // ITS_A_NUM_9
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.its_a_num_9 = iprot.readByte();
              struct.setIts_a_num_9IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // ITS_A_NUM_10
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.its_a_num_10 = iprot.readByte();
              struct.setIts_a_num_10IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // B1
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.b1 = iprot.readBool();
              struct.setB1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // BOOLEAN_2
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.boolean_2 = iprot.readBool();
              struct.setBoolean_2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ImjPacket struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.short_string_1 != null) {
        if (struct.isSetShort_string_1()) {
          oprot.writeFieldBegin(SHORT_STRING_1_FIELD_DESC);
          oprot.writeString(struct.short_string_1);
          oprot.writeFieldEnd();
        }
      }
      if (struct.short_string_2 != null) {
        if (struct.isSetShort_string_2()) {
          oprot.writeFieldBegin(SHORT_STRING_2_FIELD_DESC);
          oprot.writeString(struct.short_string_2);
          oprot.writeFieldEnd();
        }
      }
      if (struct.text != null) {
        if (struct.isSetText()) {
          oprot.writeFieldBegin(TEXT_FIELD_DESC);
          oprot.writeString(struct.text);
          oprot.writeFieldEnd();
        }
      }
      if (struct.loc != null) {
        if (struct.isSetLoc()) {
          oprot.writeFieldBegin(LOC_FIELD_DESC);
          struct.loc.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.type != null) {
        if (struct.isSetType()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeI32(struct.type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetNum_1()) {
        oprot.writeFieldBegin(NUM_1_FIELD_DESC);
        oprot.writeI32(struct.num_1);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNum_2()) {
        oprot.writeFieldBegin(NUM_2_FIELD_DESC);
        oprot.writeI32(struct.num_2);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNum_3()) {
        oprot.writeFieldBegin(NUM_3_FIELD_DESC);
        oprot.writeI64(struct.num_3);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNum_4()) {
        oprot.writeFieldBegin(NUM_4_FIELD_DESC);
        oprot.writeI64(struct.num_4);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNum_5()) {
        oprot.writeFieldBegin(NUM_5_FIELD_DESC);
        oprot.writeI16(struct.num_5);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNum_6()) {
        oprot.writeFieldBegin(NUM_6_FIELD_DESC);
        oprot.writeI16(struct.num_6);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNum_7()) {
        oprot.writeFieldBegin(NUM_7_FIELD_DESC);
        oprot.writeDouble(struct.num_7);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIts_a_num_8()) {
        oprot.writeFieldBegin(ITS_A_NUM_8_FIELD_DESC);
        oprot.writeDouble(struct.its_a_num_8);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIts_a_num_9()) {
        oprot.writeFieldBegin(ITS_A_NUM_9_FIELD_DESC);
        oprot.writeByte(struct.its_a_num_9);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIts_a_num_10()) {
        oprot.writeFieldBegin(ITS_A_NUM_10_FIELD_DESC);
        oprot.writeByte(struct.its_a_num_10);
        oprot.writeFieldEnd();
      }
      if (struct.isSetB1()) {
        oprot.writeFieldBegin(B1_FIELD_DESC);
        oprot.writeBool(struct.b1);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBoolean_2()) {
        oprot.writeFieldBegin(BOOLEAN_2_FIELD_DESC);
        oprot.writeBool(struct.boolean_2);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ImjPacketTupleSchemeFactory implements SchemeFactory {
    public ImjPacketTupleScheme getScheme() {
      return new ImjPacketTupleScheme();
    }
  }

  private static class ImjPacketTupleScheme extends TupleScheme<ImjPacket> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ImjPacket struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetShort_string_1()) {
        optionals.set(0);
      }
      if (struct.isSetShort_string_2()) {
        optionals.set(1);
      }
      if (struct.isSetText()) {
        optionals.set(2);
      }
      if (struct.isSetLoc()) {
        optionals.set(3);
      }
      if (struct.isSetType()) {
        optionals.set(4);
      }
      if (struct.isSetNum_1()) {
        optionals.set(5);
      }
      if (struct.isSetNum_2()) {
        optionals.set(6);
      }
      if (struct.isSetNum_3()) {
        optionals.set(7);
      }
      if (struct.isSetNum_4()) {
        optionals.set(8);
      }
      if (struct.isSetNum_5()) {
        optionals.set(9);
      }
      if (struct.isSetNum_6()) {
        optionals.set(10);
      }
      if (struct.isSetNum_7()) {
        optionals.set(11);
      }
      if (struct.isSetIts_a_num_8()) {
        optionals.set(12);
      }
      if (struct.isSetIts_a_num_9()) {
        optionals.set(13);
      }
      if (struct.isSetIts_a_num_10()) {
        optionals.set(14);
      }
      if (struct.isSetB1()) {
        optionals.set(15);
      }
      if (struct.isSetBoolean_2()) {
        optionals.set(16);
      }
      oprot.writeBitSet(optionals, 17);
      if (struct.isSetShort_string_1()) {
        oprot.writeString(struct.short_string_1);
      }
      if (struct.isSetShort_string_2()) {
        oprot.writeString(struct.short_string_2);
      }
      if (struct.isSetText()) {
        oprot.writeString(struct.text);
      }
      if (struct.isSetLoc()) {
        struct.loc.write(oprot);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetNum_1()) {
        oprot.writeI32(struct.num_1);
      }
      if (struct.isSetNum_2()) {
        oprot.writeI32(struct.num_2);
      }
      if (struct.isSetNum_3()) {
        oprot.writeI64(struct.num_3);
      }
      if (struct.isSetNum_4()) {
        oprot.writeI64(struct.num_4);
      }
      if (struct.isSetNum_5()) {
        oprot.writeI16(struct.num_5);
      }
      if (struct.isSetNum_6()) {
        oprot.writeI16(struct.num_6);
      }
      if (struct.isSetNum_7()) {
        oprot.writeDouble(struct.num_7);
      }
      if (struct.isSetIts_a_num_8()) {
        oprot.writeDouble(struct.its_a_num_8);
      }
      if (struct.isSetIts_a_num_9()) {
        oprot.writeByte(struct.its_a_num_9);
      }
      if (struct.isSetIts_a_num_10()) {
        oprot.writeByte(struct.its_a_num_10);
      }
      if (struct.isSetB1()) {
        oprot.writeBool(struct.b1);
      }
      if (struct.isSetBoolean_2()) {
        oprot.writeBool(struct.boolean_2);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ImjPacket struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(17);
      if (incoming.get(0)) {
        struct.short_string_1 = iprot.readString();
        struct.setShort_string_1IsSet(true);
      }
      if (incoming.get(1)) {
        struct.short_string_2 = iprot.readString();
        struct.setShort_string_2IsSet(true);
      }
      if (incoming.get(2)) {
        struct.text = iprot.readString();
        struct.setTextIsSet(true);
      }
      if (incoming.get(3)) {
        struct.loc = new Location();
        struct.loc.read(iprot);
        struct.setLocIsSet(true);
      }
      if (incoming.get(4)) {
        struct.type = Type.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.num_1 = iprot.readI32();
        struct.setNum_1IsSet(true);
      }
      if (incoming.get(6)) {
        struct.num_2 = iprot.readI32();
        struct.setNum_2IsSet(true);
      }
      if (incoming.get(7)) {
        struct.num_3 = iprot.readI64();
        struct.setNum_3IsSet(true);
      }
      if (incoming.get(8)) {
        struct.num_4 = iprot.readI64();
        struct.setNum_4IsSet(true);
      }
      if (incoming.get(9)) {
        struct.num_5 = iprot.readI16();
        struct.setNum_5IsSet(true);
      }
      if (incoming.get(10)) {
        struct.num_6 = iprot.readI16();
        struct.setNum_6IsSet(true);
      }
      if (incoming.get(11)) {
        struct.num_7 = iprot.readDouble();
        struct.setNum_7IsSet(true);
      }
      if (incoming.get(12)) {
        struct.its_a_num_8 = iprot.readDouble();
        struct.setIts_a_num_8IsSet(true);
      }
      if (incoming.get(13)) {
        struct.its_a_num_9 = iprot.readByte();
        struct.setIts_a_num_9IsSet(true);
      }
      if (incoming.get(14)) {
        struct.its_a_num_10 = iprot.readByte();
        struct.setIts_a_num_10IsSet(true);
      }
      if (incoming.get(15)) {
        struct.b1 = iprot.readBool();
        struct.setB1IsSet(true);
      }
      if (incoming.get(16)) {
        struct.boolean_2 = iprot.readBool();
        struct.setBoolean_2IsSet(true);
      }
    }
  }

}

